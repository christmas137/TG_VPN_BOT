import aiosqlite
from datetime import datetime
from dateutil.relativedelta import relativedelta
from db.database import db_path
from db.vpn_manager import VPNManager


class SubscriptionManager:

    def __init__(self, db_path):
        self.db_path = db_path
        self.vpn_manager = VPNManager()

    async def add_or_update_subscription(self, user_id, subscription_type, key_id):
        subscription_lengths = {
            "1m": 1,  # 1 –º–µ—Å—è—Ü
            "3m": 3,  # 3 –º–µ—Å—è—Ü–∞
            "6m": 6,  # 6 –º–µ—Å—è—Ü–µ–≤
            "12m": 12  # 12 –º–µ—Å—è—Ü–µ–≤
        }

        months = subscription_lengths.get(subscription_type, 1)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–µ—Å—è—Ü

        async with aiosqlite.connect(self.db_path) as conn:
            cursor = await conn.cursor()

            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UTC –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            current_utc_time = datetime.utcnow()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            await cursor.execute("SELECT subscription_end FROM subscriptions WHERE user_id = ?", (user_id,))
            subscription = await cursor.fetchone()

            if subscription:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–∞, —Ä–∞—Å—á–∏—Ç—ã–≤–∞–µ–º new_end_date –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π end_date
                current_end_date = datetime.strptime(subscription[0], "%Y-%m-%d %H:%M:%S")
                if current_end_date < current_utc_time:
                    current_end_date = current_utc_time
                new_end_date = current_end_date + relativedelta(months=months)

                # –û–±–Ω–æ–≤–ª—è–µ–º end_date, subscription_plan –∏ subscription_status –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await cursor.execute(
                    "UPDATE subscriptions SET subscription_end = ?, subscription_plan = ?, subscription_status = 1 WHERE user_id = ?",
                    (new_end_date.strftime("%Y-%m-%d %H:%M:%S"), subscription_type, user_id))
            else:
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –Ω–∞—á–∞–ª–æ–º –æ—Ç —Ç–µ–∫—É—â–µ–π UTC –¥–∞—Ç—ã
                new_end_date = current_utc_time + relativedelta(months=months)
                await cursor.execute(
                    "INSERT INTO subscriptions (user_id, subscription_start, subscription_end, subscription_plan, subscription_status, payment_id) VALUES (?, ?, ?, ?, 1, ?)",
                    (
                    user_id, current_utc_time.strftime("%Y-%m-%d %H:%M:%S"), new_end_date.strftime("%Y-%m-%d %H:%M:%S"),
                    subscription_type, key_id))

            await conn.commit()

    async def activate_promo_code(self, user_id: int, promo_code: str):
        promo_code = promo_code.upper()

        async with aiosqlite.connect(self.db_path) as conn:
            cursor = await conn.cursor()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await cursor.execute("SELECT is_activated FROM promo_codes WHERE promo_code = ?", (promo_code,))
            result = await cursor.fetchone()

            if result is not None:
                is_activated = result[0]

                if not is_activated:  # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (False), –∑–Ω–∞—á–∏—Ç –º–æ–∂–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                    await cursor.execute("UPDATE promo_codes SET is_activated = 1 WHERE promo_code = ?", (promo_code,))
                    await conn.commit()
                    await self.add_or_update_subscription(user_id, "1m", f"Promo: {promo_code}")
                    return "<b>–ü—Ä–æ–º–æ–∫–æ–¥ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>üéâüéâüéâ\n <b>–í–∞–º –¥–æ–±–∞–≤–ª–µ–Ω 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏</b>‚ú®"
                else:  # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (True)
                    return "<b>–î–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∫–µ–º-—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>üëΩ"
            else:
                return "<b>–£–≤—ã..–¢–∞–∫–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –Ω–µ—Ç</b>üòî"

    async def add_promo_code(self, promo_code: str):
        async with aiosqlite.connect(self.db_path) as conn:
            cursor = await conn.cursor()
             # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await cursor.execute("SELECT * FROM promo_codes WHERE promo_code = ?", (promo_code,))
            if await cursor.fetchone():
                 return "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
             # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await cursor.execute("INSERT INTO promo_codes (promo_code, is_activated) VALUES (?, 0)", (promo_code,))
            await conn.commit()
            return "–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω."

    async def handle_vpn_key_creation(self, user_id: int, server_choice: str, existing_vpn_key: str,
                                      vpn_key_url_column: str, vpn_key_id_column: str) -> str:

        if existing_vpn_key:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
            return f"<b>–¢–≤–æ–π –∫–ª—é—á VPN:</b> <code>{existing_vpn_key}</code>"
        else:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞ VPN
            new_vpn_key_data = self.vpn_manager.generate_vpn_key(server_choice)
            if new_vpn_key_data:
                new_vpn_key_url, new_vpn_key_id = new_vpn_key_data["access_url"], new_vpn_key_data["key_id"]
                async with aiosqlite.connect(self.db_path) as conn:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –Ω–æ–≤—ã–º URL –∏ ID –∫–ª—é—á–∞
                    await conn.execute(
                        f"UPDATE subscriptions SET {vpn_key_url_column} = ?, {vpn_key_id_column} = ? WHERE user_id = ?",
                        (new_vpn_key_url, new_vpn_key_id, user_id))
                    await conn.commit()
                return f"<b>–¢–≤–æ–π –Ω–æ–≤—ã–π –∫–ª—é—á VPN:</b> <code>{new_vpn_key_url}</code>"
            else:
                return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á VPN."

    async def check_subscription_and_get_vpn_key(self, user_id: int, server_choice: str) -> str:
        async with aiosqlite.connect(self.db_path) as conn:
            cursor = await conn.cursor()
            await cursor.execute(
                "SELECT vpn_key_germ, vpn_key_amst, id_key_germ, id_key_amst, subscription_end FROM subscriptions WHERE user_id = ?",
                (user_id,)
            )
            subscription = await cursor.fetchone()

            if subscription:
                vpn_key_germ, vpn_key_amst, id_key_germ, id_key_amst, subscription_end = subscription
                subscription_end_date = datetime.strptime(subscription_end, "%Y-%m-%d %H:%M:%S")
                server_choice_column = 'vpn_key_germ' if server_choice == 'germany_server' else 'vpn_key_amst'
                vpn_key_id_column = 'id_key_germ' if server_choice == 'germany_server' else 'id_key_amst'
                existing_vpn_key = vpn_key_germ if server_choice == 'germany_server' else vpn_key_amst

                if datetime.now() < subscription_end_date:
                    return await self.handle_vpn_key_creation(user_id, server_choice, existing_vpn_key,
                                                              server_choice_column, vpn_key_id_column)
                else:
                    return (
                        "üîí <b>–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ VPN.</b>\n\n"
                        "–ü–æ–¥–∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å—ë—Ä—Ñ–∏–Ω–≥–æ–º –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü! üåê‚ú®\n\n"
                        "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–µ –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É <code>/tariffs</code>."
                    )
            else:
                return (
                    "üîí <b>–£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ VPN.</b>\n\n"
                    "–ü–æ–¥–∫–ª—é—á–∏ –ø–æ–¥–ø–∏—Å–∫—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å—ë—Ä—Ñ–∏–Ω–≥–æ–º –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü! üåê‚ú®\n\n"
                    "–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–µ –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –∫–æ–º–∞–Ω–¥—É <code>/tariffs</code>."
                )

    async def get_subscription_info(self, user_id):
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute(
                "SELECT subscription_end FROM subscriptions WHERE user_id = ? AND subscription_status = 1", (user_id,))
            row = await cursor.fetchone()
            if row:
                return {"subscription_end": row[0]}
            return None

    async def update_expired_subscriptions_and_delete_keys(self):
        async with aiosqlite.connect(self.db_path) as db:
            cursor = await db.execute(
                "SELECT user_id, id_key_germ, id_key_amst FROM subscriptions WHERE subscription_end < CURRENT_DATE AND subscription_status = 1")
            expired_subscriptions = await cursor.fetchall()

            for sub in expired_subscriptions:
                user_id, id_key_germ, id_key_amst = sub
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–π VPN –¥–ª—è –∫–∞–∂–¥–æ–π –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
                if id_key_germ:
                    await self.vpn_manager.delete_vpn_key(id_key_germ, "germany_server")
                if id_key_amst:
                    await self.vpn_manager.delete_vpn_key(id_key_amst, "amsterdam_server")

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–ª—é—á–µ–π
            await db.execute(
                "UPDATE subscriptions SET subscription_status = 0, vpn_key_germ = NULL, vpn_key_amst = NULL, id_key_germ = NULL, id_key_amst = NULL WHERE subscription_end < CURRENT_DATE AND subscription_status = 1")
            await db.commit()